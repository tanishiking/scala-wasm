package org.scalajs.linker.backend.wasmemitter

import scala.collection.mutable

import org.scalajs.ir.{ClassKind, Position}
import org.scalajs.ir.Names._
import org.scalajs.ir.Trees._
import org.scalajs.ir.Types._

import org.scalajs.linker.interface.unstable.RuntimeClassNameMapperImpl
import org.scalajs.linker.standard.{CoreSpec, LinkedClass, LinkedTopLevelExport}

import org.scalajs.linker.backend.webassembly.FunctionBuilder
import org.scalajs.linker.backend.webassembly.{Instructions => wa}
import org.scalajs.linker.backend.webassembly.{Modules => wamod}
import org.scalajs.linker.backend.webassembly.{Names => wanme}
import org.scalajs.linker.backend.webassembly.{Types => watpe}

import EmbeddedConstants._
import SWasmGen._
import VarGen._
import TypeTransformer._
import WasmContext._
import org.scalajs.linker.backend.wasmemitter.FunctionEmitter.SWasmTrees

class ClassEmitter(coreSpec: CoreSpec) {
  def genClassDef(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    val classInfo = ctx.getClassInfo(clazz.className)

    if (classInfo.hasRuntimeTypeInfo && !(clazz.kind.isClass && clazz.hasDirectInstances)) {
      // Gen typeData -- for concrete Scala classes, we do it as part of the vtable generation instead
      val typeDataFieldValues = genTypeDataFieldValues(clazz, Nil)
      genTypeDataGlobal(clazz.className, genTypeName.typeData, typeDataFieldValues, Nil)
    }

    // Declare static fields
    for {
      field @ FieldDef(flags, name, _, ftpe) <- clazz.fields
      if flags.namespace.isStatic
    } {
      val global = wamod.Global(
        genGlobalName.forStaticField(name.name),
        transformType(ftpe),
        wamod.Expr(List(genZeroOf(ftpe))),
        isMutable = true
      )
      ctx.addGlobal(global)
    }

    // Generate method implementations
    for (method <- clazz.methods) {
      if (method.body.isDefined)
        genFunction(clazz, method)
    }

    clazz.kind match {
      case ClassKind.Class | ClassKind.ModuleClass =>
        genScalaClass(clazz)
      case ClassKind.Interface =>
        genInterface(clazz)
      case ClassKind.JSClass | ClassKind.JSModuleClass =>
        genJSClass(clazz)
      case ClassKind.HijackedClass | ClassKind.AbstractJSType | ClassKind.NativeJSClass |
          ClassKind.NativeJSModuleClass =>
        () // nothing to do
    }
  }

  /** Generates code for a top-level export.
    *
    * The strategy for top-level exports is as follows:
    *
    *   - the JS code declares a non-initialized `let` for every top-level export, and exports it
    *     from the module with an ECMAScript `export`
    *   - the JS code provides a setter function that we import into a Wasm, which allows to set the
    *     value of that `let`
    *   - the Wasm code "publishes" every update to top-level exports to the JS code via this
    *     setter; this happens once in the `start` function for every kind of top-level export (see
    *     `Emitter.genStartFunction`), and in addition upon each reassignment of a top-level
    *     exported field (see `FunctionEmitter.genAssign`).
    *
    * This method declares the import of the setter on the Wasm side, for all kinds of top-level
    * exports. In addition, for exported *methods*, it generates the implementation of the method as
    * a Wasm function.
    *
    * The JS code is generated by `Emitter.buildJSFileContent`. Note that for fields, the JS `let`s
    * are only "mirrors" of the state. The source of truth for the state remains in the Wasm Global
    * for the static field. This is fine because, by spec of ECMAScript modules, JavaScript code
    * that *uses* the export cannot mutate it; it can only read it.
    */
  def genTopLevelExport(
      topLevelExport: LinkedTopLevelExport
  )(implicit ctx: WasmContext): Unit = {
    genTopLevelExportSetter(topLevelExport.exportName)
    topLevelExport.tree match {
      case d: TopLevelMethodExportDef => genTopLevelMethodExportDef(d)
      case _                          => ()
    }
  }

  private def genIsJSClassInstanceFunction(clazz: LinkedClass)(implicit
      ctx: WasmContext
  ): Option[wanme.FunctionName] = {
    import org.scalajs.ir.OriginalName.NoOriginalName

    implicit val noPos: Position = Position.NoPosition

    val hasIsJSClassInstance = clazz.kind match {
      case ClassKind.NativeJSClass => clazz.jsNativeLoadSpec.isDefined
      case ClassKind.JSClass       => clazz.jsClassCaptures.isEmpty
      case _                       => false
    }

    if (hasIsJSClassInstance) {
      val fb = new FunctionBuilder(
        ctx.moduleBuilder,
        genFunctionName.isJSClassInstance(clazz.className),
        noPos
      )
      val xParam = fb.addParam("x", watpe.RefType.anyref)
      fb.setResultType(watpe.Int32)
      fb.setFunctionType(genTypeName.isJSClassInstanceFuncType)

      val instrs = fb

      if (clazz.kind == ClassKind.JSClass && !clazz.hasInstances) {
        /* We need to constant-fold the instance test, to avoid trying to
         * call $loadJSClass.className, since it will not exist at all.
         */
        instrs += wa.I32Const(0) // false
      } else {
        instrs += wa.LocalGet(xParam)
        genLoadJSConstructor(instrs, clazz.className)
        instrs += wa.Call(genFunctionName.jsBinaryOps(JSBinaryOp.instanceof))
        instrs += wa.Call(genFunctionName.unbox(BooleanRef))
      }

      val func = fb.buildAndAddToModule()
      Some(func.name)
    } else {
      None
    }
  }

  private def genTypeDataFieldValues(
      clazz: LinkedClass,
      reflectiveProxies: List[ConcreteMethodInfo]
  )(implicit
      ctx: WasmContext
  ): List[wa.Instr] = {
    val className = clazz.className
    val classInfo = ctx.getClassInfo(className)

    val nameStr = RuntimeClassNameMapperImpl.map(
      coreSpec.semantics.runtimeClassNameMapper,
      className.nameString
    )
    val nameDataValue: List[wa.Instr] = ctx.getConstantStringDataInstr(nameStr)

    val kind = className match {
      case ObjectClass         => KindObject
      case BoxedUnitClass      => KindBoxedUnit
      case BoxedBooleanClass   => KindBoxedBoolean
      case BoxedCharacterClass => KindBoxedCharacter
      case BoxedByteClass      => KindBoxedByte
      case BoxedShortClass     => KindBoxedShort
      case BoxedIntegerClass   => KindBoxedInteger
      case BoxedLongClass      => KindBoxedLong
      case BoxedFloatClass     => KindBoxedFloat
      case BoxedDoubleClass    => KindBoxedDouble
      case BoxedStringClass    => KindBoxedString

      case _ =>
        clazz.kind match {
          case ClassKind.Class | ClassKind.ModuleClass | ClassKind.HijackedClass => KindClass
          case ClassKind.Interface                                               => KindInterface
          case _                                                                 => KindJSType
        }
    }

    val strictAncestorsValue: List[wa.Instr] = {
      val ancestors = ctx.getClassInfo(className).ancestors

      // By spec, the first element of `ancestors` is always the class itself
      assert(
        ancestors.headOption.contains(className),
        s"The ancestors of ${className.nameString} do not start with itself: $ancestors"
      )
      val strictAncestors = ancestors.tail

      val elems = for {
        ancestor <- strictAncestors
        if ctx.getClassInfo(ancestor).hasRuntimeTypeInfo
      } yield {
        wa.GlobalGet(genGlobalName.forVTable(ancestor))
      }
      elems :+ wa.ArrayNewFixed(genTypeName.typeDataArray, elems.size)
    }

    val cloneFunction = {
      // If the class is concrete and implements the `java.lang.Cloneable`,
      // `genCloneFunction` should've generated the clone function
      if (!classInfo.isAbstract && classInfo.ancestors.contains(CloneableClass))
        wa.RefFunc(genFunctionName.clone(className))
      else
        wa.RefNull(watpe.HeapType.NoFunc)
    }

    val isJSClassInstance = genIsJSClassInstanceFunction(clazz) match {
      case None           => wa.RefNull(watpe.HeapType.NoFunc)
      case Some(funcName) => wa.RefFunc(funcName)
    }

    val reflectiveProxiesInstrs: List[wa.Instr] = {
      reflectiveProxies.flatMap { proxyInfo =>
        val proxyId = ctx.getReflectiveProxyId(proxyInfo.methodName)
        List(
          wa.I32Const(proxyId),
          wa.RefFunc(proxyInfo.tableEntryName),
          wa.StructNew(genTypeName.reflectiveProxy)
        )
      } :+ wa.ArrayNewFixed(genTypeName.reflectiveProxies, reflectiveProxies.size)
    }

    nameDataValue :::
      List(
        // kind
        wa.I32Const(kind),
        // specialInstanceTypes
        wa.I32Const(classInfo.specialInstanceTypes)
      ) ::: (
        // strictAncestors
        strictAncestorsValue
      ) :::
      List(
        // componentType - always `null` since this method is not used for array types
        wa.RefNull(watpe.HeapType(genTypeName.typeData)),
        // name - initially `null`; filled in by the `typeDataName` helper
        wa.RefNull(watpe.HeapType.Any),
        // the classOf instance - initially `null`; filled in by the `createClassOf` helper
        wa.RefNull(watpe.HeapType(genTypeName.ClassStruct)),
        // arrayOf, the typeData of an array of this type - initially `null`; filled in by the `arrayTypeData` helper
        wa.RefNull(watpe.HeapType(genTypeName.ObjectVTable)),
        // clonefFunction - will be invoked from `clone()` method invokaion on the class
        cloneFunction,
        // isJSClassInstance - invoked from the `isInstance()` helper for JS types
        isJSClassInstance
      ) :::
      // reflective proxies - used to reflective call on the class at runtime.
      // Generated instructions create an array of reflective proxy structs, where each struct
      // contains the ID of the reflective proxy and a reference to the actual method implementation.
      reflectiveProxiesInstrs
  }

  private def genTypeDataGlobal(
      className: ClassName,
      typeDataTypeName: wanme.TypeName,
      typeDataFieldValues: List[wa.Instr],
      vtableElems: List[wa.RefFunc]
  )(implicit ctx: WasmContext): Unit = {
    val instrs: List[wa.Instr] =
      typeDataFieldValues ::: vtableElems ::: wa.StructNew(typeDataTypeName) :: Nil
    ctx.addGlobal(
      wamod.Global(
        genGlobalName.forVTable(className),
        watpe.RefType(typeDataTypeName),
        wamod.Expr(instrs),
        isMutable = false
      )
    )
  }

  /** Generates a Scala class or module class. */
  private def genScalaClass(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    val className = clazz.name.name
    val typeRef = ClassRef(className)
    val classInfo = ctx.getClassInfo(className)

    // generate vtable type, this should be done for both abstract and concrete classes
    val vtableTypeName = genVTableType(classInfo)

    val isAbstractClass = !clazz.hasDirectInstances

    // we should't generate global vtable for abstract class because
    // - Can't generate Global vtable because we can't fill the slot for abstract methods
    // - We won't access vtable for abstract classes since we can't instantiate abstract classes, there's no point generating
    //
    // When we don't generate a vtable, we still generate the typeData

    if (!isAbstractClass) {
      // Generate an actual vtable, which we integrate into the typeData
      val reflectiveProxies =
        classInfo.resolvedMethodInfos.valuesIterator.filter(_.methodName.isReflectiveProxy).toList
      val typeDataFieldValues = genTypeDataFieldValues(clazz, reflectiveProxies)
      val vtableElems = classInfo.tableEntries.map { methodName =>
        wa.RefFunc(classInfo.resolvedMethodInfos(methodName).tableEntryName)
      }
      genTypeDataGlobal(className, vtableTypeName, typeDataFieldValues, vtableElems)

      // Generate the itable
      genGlobalClassItable(clazz)
    }

    // Declare the struct type for the class
    val vtableField = wamod.StructField(
      genFieldName.objStruct.vtable,
      watpe.RefType(vtableTypeName),
      isMutable = false
    )
    val itablesField = wamod.StructField(
      genFieldName.objStruct.itables,
      watpe.RefType.nullable(genTypeName.itables),
      isMutable = false
    )
    val fields = classInfo.allFieldDefs.map { field =>
      wamod.StructField(
        genFieldName.forClassInstanceField(field.name.name),
        transformType(field.ftpe),
        isMutable = true // initialized by the constructors, so always mutable at the Wasm level
      )
    }
    val structTypeName = genTypeName.forClass(clazz.name.name)
    val superType = clazz.superClass.map(s => genTypeName.forClass(s.name))
    val structType = wamod.StructType(vtableField :: itablesField :: fields)
    val subType = wamod.SubType(structTypeName, isFinal = false, superType, structType)
    ctx.mainRecType.addSubType(subType)

    // Define the `new` function and possibly the `clone` function, unless the class is abstract
    if (!isAbstractClass) {
      genNewDefaultFunc(clazz)
      if (clazz.ancestors.contains(CloneableClass))
        genCloneFunction(clazz)
    }

    // Generate the module accessor
    if (clazz.kind == ClassKind.ModuleClass && clazz.hasInstances) {
      val heapType = watpe.HeapType(genTypeName.forClass(clazz.className))

      // global instance
      // (global name (ref null type))
      val global = wamod.Global(
        genGlobalName.forModuleInstance(clazz.name.name),
        watpe.RefType.nullable(heapType),
        wamod.Expr(List(wa.RefNull(heapType))),
        isMutable = true
      )
      ctx.addGlobal(global)

      genModuleAccessor(clazz)
    }
  }

  private def genVTableType(
      classInfo: ClassInfo
  )(implicit ctx: WasmContext): wanme.TypeName = {
    val typeName = genTypeName.forVTable(classInfo.name)
    val vtableFields =
      classInfo.tableEntries.map { methodName =>
        wamod.StructField(
          genFieldName.forMethodTableEntry(methodName),
          watpe.RefType(ctx.tableFunctionType(methodName)),
          isMutable = false
        )
      }
    val superType = classInfo.superClass match {
      case None    => genTypeName.typeData
      case Some(s) => genTypeName.forVTable(s)
    }
    val structType = wamod.StructType(CoreWasmLib.typeDataStructFields ::: vtableFields)
    val subType = wamod.SubType(typeName, isFinal = false, Some(superType), structType)
    ctx.mainRecType.addSubType(subType)
    typeName
  }

  /** Generate type inclusion test for interfaces.
    *
    * The expression `isInstanceOf[<interface>]` will be compiled to a CALL to the function
    * generated by this method.
    */
  private def genInterfaceInstanceTest(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    assert(clazz.kind == ClassKind.Interface)

    val classInfo = ctx.getClassInfo(clazz.className)

    val fb = new FunctionBuilder(
      ctx.moduleBuilder,
      genFunctionName.instanceTest(clazz.name.name),
      clazz.pos
    )
    val exprParam = fb.addParam("expr", watpe.RefType.anyref)
    fb.setResultType(watpe.Int32)

    val instrs = fb

    val itables = fb.addLocal("itables", watpe.RefType.nullable(genTypeName.itables))
    val exprNonNullLocal = fb.addLocal("exprNonNull", watpe.RefType.any)

    val itableIdx = ctx.getItableIdx(classInfo)
    instrs.block(watpe.RefType.anyref) { testFail =>
      // if expr is not an instance of Object, return false
      instrs += wa.LocalGet(exprParam)
      instrs += wa.BrOnCastFail(
        testFail,
        watpe.RefType.anyref,
        watpe.RefType(genTypeName.ObjectStruct)
      )

      // get itables and store
      instrs += wa.StructGet(genTypeName.ObjectStruct, genFieldIdx.objStruct.itables)
      instrs += wa.LocalSet(itables)

      // Dummy return value from the block
      instrs += wa.RefNull(watpe.HeapType.Any)

      // if the itables is null (no interfaces are implemented)
      instrs += wa.LocalGet(itables)
      instrs += wa.BrOnNull(testFail)

      instrs += wa.LocalGet(itables)
      instrs += wa.I32Const(itableIdx)
      instrs += wa.ArrayGet(genTypeName.itables)
      instrs += wa.RefTest(watpe.RefType(genTypeName.forITable(clazz.name.name)))
      instrs += wa.Return
    } // test fail

    if (classInfo.isAncestorOfHijackedClass) {
      /* It could be a hijacked class instance that implements this interface.
       * Test whether `jsValueType(expr)` is in the `specialInstanceTypes` bitset.
       * In other words, return `((1 << jsValueType(expr)) & specialInstanceTypes) != 0`.
       *
       * For example, if this class is `Comparable`,
       * `specialInstanceTypes == 0b00001111`, since `jl.Boolean`, `jl.String`
       * and `jl.Double` implement `Comparable`, but `jl.Void` does not.
       * If `expr` is a `number`, `jsValueType(expr) == 3`. We then test whether
       * `(1 << 3) & 0b00001111 != 0`, which is true because `(1 << 3) == 0b00001000`.
       * If `expr` is `undefined`, it would be `(1 << 4) == 0b00010000`, which
       * would give `false`.
       */
      val anyRefToVoidSig = wamod.FunctionType(List(watpe.RefType.anyref), Nil)

      instrs.block(anyRefToVoidSig) { isNullLabel =>
        // exprNonNull := expr; branch to isNullLabel if it is null
        instrs += wa.BrOnNull(isNullLabel)
        instrs += wa.LocalSet(exprNonNullLocal)

        // Load 1 << jsValueType(expr)
        instrs += wa.I32Const(1)
        instrs += wa.LocalGet(exprNonNullLocal)
        instrs += wa.Call(genFunctionName.jsValueType)
        instrs += wa.I32Shl

        // return (... & specialInstanceTypes) != 0
        instrs += wa.I32Const(classInfo.specialInstanceTypes)
        instrs += wa.I32And
        instrs += wa.I32Const(0)
        instrs += wa.I32Ne
        instrs += wa.Return
      }

      instrs += wa.I32Const(0) // false
    } else {
      instrs += wa.Drop
      instrs += wa.I32Const(0) // false
    }

    fb.buildAndAddToModule()
  }

  private def genNewDefaultFunc(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    val className = clazz.name.name
    val classInfo = ctx.getClassInfo(className)
    assert(clazz.hasDirectInstances)

    val structName = genTypeName.forClass(className)
    val fb = new FunctionBuilder(
      ctx.moduleBuilder,
      genFunctionName.newDefault(className),
      clazz.pos
    )
    fb.setResultType(watpe.RefType(structName))

    val instrs = fb

    instrs += wa.GlobalGet(genGlobalName.forVTable(className))

    val interfaces = classInfo.ancestors.map(ctx.getClassInfo(_)).filter(_.isInterface)
    if (!interfaces.isEmpty)
      instrs += wa.GlobalGet(genGlobalName.forITable(className))
    else
      instrs += wa.RefNull(watpe.HeapType(genTypeName.itables))

    classInfo.allFieldDefs.foreach { f =>
      instrs += genZeroOf(f.ftpe)
    }
    instrs += wa.StructNew(structName)

    fb.buildAndAddToModule()
  }

  /** Generate clone function for the given class, if it is concrete and implements the Cloneable
    * interface. The generated clone function will be registered in the typeData of the class (which
    * resides in the vtable of the class), and will be invoked when the `super.clone()` method is
    * called on the class instance.
    */
  private def genCloneFunction(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    val className = clazz.className
    val info = ctx.getClassInfo(className)

    val fb = new FunctionBuilder(
      ctx.moduleBuilder,
      genFunctionName.clone(className),
      clazz.pos
    )
    val fromParam = fb.addParam("from", watpe.RefType(genTypeName.ObjectStruct))
    fb.setResultType(watpe.RefType(genTypeName.ObjectStruct))
    fb.setFunctionType(genTypeName.cloneFunctionType)

    val instrs = fb

    val heapType = watpe.HeapType(genTypeName.forClass(className))

    val from = fb.addLocal("fromTyped", watpe.RefType.nullable(heapType))
    val result = fb.addLocal("result", watpe.RefType.nullable(heapType))

    instrs += wa.LocalGet(fromParam)
    instrs += wa.RefCast(watpe.RefType(heapType))
    instrs += wa.LocalSet(from)

    instrs += wa.Call(genFunctionName.newDefault(className))
    instrs += wa.LocalSet(result)
    info.allFieldDefs.foreach { field =>
      val fieldIdx = info.getFieldIdx(field.name.name)
      instrs += wa.LocalGet(result)
      instrs += wa.LocalGet(from)
      instrs += wa.StructGet(genTypeName.forClass(className), fieldIdx)
      instrs += wa.StructSet(genTypeName.forClass(className), fieldIdx)
    }
    instrs += wa.LocalGet(result)
    instrs += wa.RefAsNotNull

    fb.buildAndAddToModule()
  }

  private def genModuleAccessor(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    assert(clazz.kind == ClassKind.ModuleClass)

    val className = clazz.className
    val globalInstanceName = genGlobalName.forModuleInstance(className)
    val ctorName =
      genFunctionName.forMethod(MemberNamespace.Constructor, className, NoArgConstructorName)
    val resultTyp = watpe.RefType(genTypeName.forClass(className))

    val fb = new FunctionBuilder(
      ctx.moduleBuilder,
      genFunctionName.loadModule(clazz.className),
      clazz.pos
    )
    fb.setResultType(resultTyp)

    val instanceLocal = fb.addLocal("instance", resultTyp)

    val instrs = fb

    instrs.block(resultTyp) { nonNullLabel =>
      // load global, return if not null
      instrs += wa.GlobalGet(globalInstanceName)
      instrs += wa.BrOnNonNull(nonNullLabel)

      // create an instance and call its constructor
      instrs += wa.Call(genFunctionName.newDefault(className))
      instrs += wa.LocalTee(instanceLocal)
      instrs += wa.Call(ctorName)

      // store it in the global
      instrs += wa.LocalGet(instanceLocal)
      instrs += wa.GlobalSet(globalInstanceName)

      // return it
      instrs += wa.LocalGet(instanceLocal)
    }

    fb.buildAndAddToModule()
  }

  /** Generate global instance of the class itable. Their init value will be an array of null refs
    * of size = number of interfaces. They will be initialized in start function
    */
  private def genGlobalClassItable(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    val info = ctx.getClassInfo(clazz.className)
    val implementsAnyInterface = info.ancestors.exists(a => ctx.getClassInfo(a).isInterface)
    if (implementsAnyInterface) {
      val globalName = genGlobalName.forITable(clazz.className)
      val itablesInit = List(
        wa.I32Const(ctx.itablesLength),
        wa.ArrayNewDefault(genTypeName.itables)
      )
      val global = wamod.Global(
        globalName,
        watpe.RefType(genTypeName.itables),
        wamod.Expr(itablesInit),
        isMutable = false
      )
      ctx.addGlobalITable(clazz.className, global)
    }
  }

  private def genInterface(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    assert(clazz.kind == ClassKind.Interface)
    // gen itable type
    val className = clazz.name.name
    val classInfo = ctx.getClassInfo(clazz.className)
    val itableTypeName = genTypeName.forITable(className)
    val itableType = wamod.StructType(
      classInfo.tableEntries.map { methodName =>
        wamod.StructField(
          genFieldName.forMethodTableEntry(methodName),
          watpe.RefType(ctx.tableFunctionType(methodName)),
          isMutable = false
        )
      }
    )
    ctx.mainRecType.addSubType(itableTypeName, itableType)

    if (clazz.hasInstanceTests)
      genInterfaceInstanceTest(clazz)
  }

  private def genJSClass(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    assert(clazz.kind.isJSClass)

    // Define the globals holding the Symbols of private fields
    for (fieldDef <- clazz.fields) {
      fieldDef match {
        case FieldDef(flags, name, _, _) if !flags.namespace.isStatic =>
          ctx.addGlobal(
            wamod.Global(
              genGlobalName.forJSPrivateField(name.name),
              watpe.RefType.anyref,
              wamod.Expr(List(wa.RefNull(watpe.HeapType.Any))),
              isMutable = true
            )
          )
          ctx.addJSPrivateFieldName(name.name)
        case _ =>
          ()
      }
    }

    if (clazz.hasInstances) {
      genCreateJSClassFunction(clazz)

      if (clazz.jsClassCaptures.isEmpty)
        genLoadJSClassFunction(clazz)

      if (clazz.kind == ClassKind.JSModuleClass)
        genLoadJSModuleFunction(clazz)
    }
  }

  private def genCreateJSClassFunction(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    implicit val noPos: Position = Position.NoPosition

    val jsClassCaptures = clazz.jsClassCaptures.getOrElse(Nil)

    /* We need to decompose the body of the constructor into 3 closures.
     * Given an IR constructor of the form
     *   constructor(...params) {
     *     preSuperStats;
     *     super(...superArgs);
     *     postSuperStats;
     *   }
     * We will create closures for `preSuperStats`, `superArgs` and `postSuperStats`.
     *
     * There is one huge catch: `preSuperStats` can declare `VarDef`s at its top-level,
     * and those vars are still visible inside `superArgs` and `postSuperStats`.
     * The `preSuperStats` must therefore return a struct with the values of its
     * declared vars, which will be given as an additional argument to `superArgs`
     * and `postSuperStats`. We call that struct the `preSuperEnv`.
     *
     * In the future, we should optimize `preSuperEnv` to only store locals that
     * are still used by `superArgs` and/or `postSuperArgs`.
     */

    val preSuperStatsFunctionName = genFunctionName.preSuperStats(clazz.className)
    val superArgsFunctionName = genFunctionName.superArgs(clazz.className)
    val postSuperStatsFunctionName = genFunctionName.postSuperStats(clazz.className)
    val ctor = clazz.jsConstructorDef.get

    FunctionEmitter.emitJSConstructorFunctions(
      preSuperStatsFunctionName,
      superArgsFunctionName,
      postSuperStatsFunctionName,
      clazz.className,
      jsClassCaptures,
      ctor
    )

    // Build the actual `createJSClass` function
    val createJSClassFun = {
      val fb = new FunctionBuilder(
        ctx.moduleBuilder,
        genFunctionName.createJSClassOf(clazz.className),
        clazz.pos
      )
      val classCaptureParams = jsClassCaptures.map { cc =>
        fb.addParam("cc." + cc.name.name.nameString, transformType(cc.ptpe))
      }
      fb.setResultType(watpe.RefType.any)

      val instrs = fb

      val dataStructTypeName = ctx.getClosureDataStructType(jsClassCaptures.map(_.ptpe))

      // --- Internal name management of `createJSClass`

      val dataStructLocal = fb.addLocal("classCaptures", watpe.RefType(dataStructTypeName))
      val jsClassLocal = fb.addLocal("jsClass", watpe.RefType.any)

      var lastInnerFuncIndex = -1
      def genInnerFuncName(): wanme.FunctionName = {
        lastInnerFuncIndex += 1
        wanme.FunctionName(fb.functionName.name + "__c" + lastInnerFuncIndex)
      }

      // --- Actual start of instructions of `createJSClass`

      // Bundle class captures in a capture data struct -- leave it on the stack for createJSClass
      for (classCaptureParam <- classCaptureParams)
        instrs += wa.LocalGet(classCaptureParam)
      instrs += wa.StructNew(dataStructTypeName)
      instrs += wa.LocalTee(dataStructLocal)

      val classCaptureParamsOfTypeAny: Map[LocalName, wanme.LocalName] = {
        jsClassCaptures
          .zip(classCaptureParams)
          .collect { case (ParamDef(ident, _, AnyType, _), param) =>
            ident.name -> param
          }
          .toMap
      }

      def genLoadIsolatedTree(tree: Tree): Unit = {
        tree match {
          case StringLiteral(value) =>
            // Common shape for all the `nameTree` expressions
            instrs ++= ctx.getConstantStringInstr(value)

          case VarRef(LocalIdent(localName)) if classCaptureParamsOfTypeAny.contains(localName) =>
            /* Common shape for the `jsSuperClass` value
             * We can only deal with class captures of type `AnyType` in this way,
             * since otherwise we might need `adapt` to box the values.
             */
            instrs += wa.LocalGet(classCaptureParamsOfTypeAny(localName))

          case _ =>
            // For everything else, put the tree in its own function and call it
            val closureFuncName = genInnerFuncName()
            FunctionEmitter.emitFunction(
              closureFuncName,
              enclosingClassName = None,
              Some(jsClassCaptures),
              receiverTyp = None,
              paramDefs = Nil,
              restParam = None,
              tree,
              AnyType
            )
            instrs += wa.LocalGet(dataStructLocal)
            instrs += wa.Call(closureFuncName)
        }
      }

      /* Load super constructor; specified by
       * https://lampwww.epfl.ch/~doeraene/sjsir-semantics/#sec-sjsir-classdef-runtime-semantics-evaluation
       * - if `jsSuperClass` is defined, evaluate it;
       * - otherwise load the JS constructor of the declared superClass,
       *   as if by `LoadJSConstructor`.
       */
      clazz.jsSuperClass match {
        case None =>
          genLoadJSConstructor(instrs, clazz.superClass.get.name)
        case Some(jsSuperClassTree) =>
          genLoadIsolatedTree(jsSuperClassTree)
      }

      // Load the references to the 3 functions that make up the constructor
      instrs += ctx.refFuncWithDeclaration(preSuperStatsFunctionName)
      instrs += ctx.refFuncWithDeclaration(superArgsFunctionName)
      instrs += ctx.refFuncWithDeclaration(postSuperStatsFunctionName)

      // Load the array of field names and initial values
      instrs += wa.Call(genFunctionName.jsNewArray)
      for (fieldDef <- clazz.fields if !fieldDef.flags.namespace.isStatic) {
        // Append the name
        fieldDef match {
          case FieldDef(_, name, _, _) =>
            instrs += wa.GlobalGet(genGlobalName.forJSPrivateField(name.name))
          case JSFieldDef(_, nameTree, _) =>
            genLoadIsolatedTree(nameTree)
        }
        instrs += wa.Call(genFunctionName.jsArrayPush)

        // Append the boxed representation of the zero of the field
        instrs += genBoxedZeroOf(fieldDef.ftpe)
        instrs += wa.Call(genFunctionName.jsArrayPush)
      }

      // Call the createJSClass helper to bundle everything
      if (ctor.restParam.isDefined) {
        instrs += wa.I32Const(ctor.args.size) // number of fixed params
        instrs += wa.Call(genFunctionName.createJSClassRest)
      } else {
        instrs += wa.Call(genFunctionName.createJSClass)
      }

      // Store the result, locally in `jsClass` and possibly in the global cache
      if (clazz.jsClassCaptures.isEmpty) {
        // Static JS class with a global cache
        instrs += wa.LocalTee(jsClassLocal)
        instrs += wa.GlobalSet(genGlobalName.forJSClassValue(clazz.className))
      } else {
        // Local or inner JS class, which is new every time
        instrs += wa.LocalSet(jsClassLocal)
      }

      // Install methods and properties
      for (methodOrProp <- clazz.exportedMembers) {
        val isStatic = methodOrProp.flags.namespace.isStatic
        instrs += wa.LocalGet(dataStructLocal)
        instrs += wa.LocalGet(jsClassLocal)

        val receiverTyp = if (isStatic) None else Some(watpe.RefType.anyref)

        methodOrProp match {
          case JSMethodDef(flags, nameTree, params, restParam, body) =>
            genLoadIsolatedTree(nameTree)

            val closureFuncName = genInnerFuncName()
            FunctionEmitter.emitFunction(
              closureFuncName,
              Some(clazz.className),
              Some(jsClassCaptures),
              receiverTyp,
              params,
              restParam,
              body,
              AnyType
            )
            instrs += ctx.refFuncWithDeclaration(closureFuncName)

            instrs += wa.I32Const(if (restParam.isDefined) params.size else -1)
            if (isStatic)
              instrs += wa.Call(genFunctionName.installJSStaticMethod)
            else
              instrs += wa.Call(genFunctionName.installJSMethod)

          case JSPropertyDef(flags, nameTree, optGetter, optSetter) =>
            genLoadIsolatedTree(nameTree)

            optGetter match {
              case None =>
                instrs += wa.RefNull(watpe.HeapType.Func)

              case Some(getterBody) =>
                val closureFuncName = genInnerFuncName()
                FunctionEmitter.emitFunction(
                  closureFuncName,
                  Some(clazz.className),
                  Some(jsClassCaptures),
                  receiverTyp,
                  paramDefs = Nil,
                  restParam = None,
                  getterBody,
                  resultType = AnyType
                )
                instrs += ctx.refFuncWithDeclaration(closureFuncName)
            }

            optSetter match {
              case None =>
                instrs += wa.RefNull(watpe.HeapType.Func)

              case Some((setterParamDef, setterBody)) =>
                val closureFuncName = genInnerFuncName()
                FunctionEmitter.emitFunction(
                  closureFuncName,
                  Some(clazz.className),
                  Some(jsClassCaptures),
                  receiverTyp,
                  setterParamDef :: Nil,
                  restParam = None,
                  setterBody,
                  resultType = NoType
                )
                instrs += ctx.refFuncWithDeclaration(closureFuncName)
            }

            if (isStatic)
              instrs += wa.Call(genFunctionName.installJSStaticProperty)
            else
              instrs += wa.Call(genFunctionName.installJSProperty)
        }
      }

      // Static fields
      for (fieldDef <- clazz.fields if fieldDef.flags.namespace.isStatic) {
        // Load class value
        instrs += wa.LocalGet(jsClassLocal)

        // Load name
        fieldDef match {
          case FieldDef(_, name, _, _) =>
            throw new AssertionError(
              s"Unexpected private static field ${name.name.nameString} "
                + s"in JS class ${clazz.className.nameString}"
            )
          case JSFieldDef(_, nameTree, _) =>
            genLoadIsolatedTree(nameTree)
        }

        // Generate boxed representation of the zero of the field
        instrs += genBoxedZeroOf(fieldDef.ftpe)

        instrs += wa.Call(genFunctionName.installJSField)
      }

      // Class initializer
      if (clazz.methods.exists(_.methodName.isClassInitializer)) {
        assert(
          clazz.jsClassCaptures.isEmpty,
          s"Illegal class initializer in non-static class ${clazz.className.nameString}"
        )
        val namespace = MemberNamespace.StaticConstructor
        instrs += wa.Call(
          genFunctionName.forMethod(namespace, clazz.className, ClassInitializerName)
        )
      }

      // Final result
      instrs += wa.LocalGet(jsClassLocal)

      fb.buildAndAddToModule()
    }
  }

  private def genLoadJSClassFunction(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    val cachedJSClassGlobal = wamod.Global(
      genGlobalName.forJSClassValue(clazz.className),
      watpe.RefType.anyref,
      wamod.Expr(List(wa.RefNull(watpe.HeapType.Any))),
      isMutable = true
    )
    ctx.addGlobal(cachedJSClassGlobal)

    val fb = new FunctionBuilder(
      ctx.moduleBuilder,
      genFunctionName.loadJSClass(clazz.className),
      clazz.pos
    )
    fb.setResultType(watpe.RefType.any)

    val instrs = fb

    instrs.block(watpe.RefType.any) { doneLabel =>
      // Load cached JS class, return if non-null
      instrs += wa.GlobalGet(cachedJSClassGlobal.name)
      instrs += wa.BrOnNonNull(doneLabel)
      // Otherwise, call createJSClass -- it will also store the class in the cache
      instrs += wa.Call(genFunctionName.createJSClassOf(clazz.className))
    }

    fb.buildAndAddToModule()
  }

  private def genLoadJSModuleFunction(clazz: LinkedClass)(implicit ctx: WasmContext): Unit = {
    val className = clazz.className
    val cacheGlobalName = genGlobalName.forModuleInstance(className)

    ctx.addGlobal(
      wamod.Global(
        cacheGlobalName,
        watpe.RefType.anyref,
        wamod.Expr(List(wa.RefNull(watpe.HeapType.Any))),
        isMutable = true
      )
    )

    val fb = new FunctionBuilder(
      ctx.moduleBuilder,
      genFunctionName.loadModule(className),
      clazz.pos
    )
    fb.setResultType(watpe.RefType.anyref)

    val instrs = fb

    instrs.block(watpe.RefType.anyref) { doneLabel =>
      // Load cached instance; return if non-null
      instrs += wa.GlobalGet(cacheGlobalName)
      instrs += wa.BrOnNonNull(doneLabel)

      // Get the JS class and instantiate it
      instrs += wa.Call(genFunctionName.loadJSClass(className))
      instrs += wa.Call(genFunctionName.jsNewArray)
      instrs += wa.Call(genFunctionName.jsNew)

      // Store and return the result
      instrs += wa.GlobalSet(cacheGlobalName)
      instrs += wa.GlobalGet(cacheGlobalName)
    }

    fb.buildAndAddToModule()
  }

  /** Generates the function import for a top-level export setter. */
  private def genTopLevelExportSetter(exportedName: String)(implicit ctx: WasmContext): Unit = {
    val functionName = genFunctionName.forTopLevelExportSetter(exportedName)
    val functionSig = wamod.FunctionType(List(watpe.RefType.anyref), Nil)
    val functionType = ctx.moduleBuilder.functionTypeToTypeName(functionSig)

    ctx.moduleBuilder.addImport(
      wamod.Import(
        "__scalaJSExportSetters",
        exportedName,
        wamod.ImportDesc.Func(functionName, functionType)
      )
    )
  }

  private def genTopLevelMethodExportDef(
      exportDef: TopLevelMethodExportDef
  )(implicit ctx: WasmContext): Unit = {
    implicit val pos = exportDef.pos

    val method = exportDef.methodDef
    val exportedName = exportDef.topLevelExportName
    val functionName = genFunctionName.forExport(exportedName)

    FunctionEmitter.emitFunction(
      functionName,
      enclosingClassName = None,
      captureParamDefs = None,
      receiverTyp = None,
      method.args,
      method.restParam,
      method.body,
      resultType = AnyType
    )
  }

  private def genFunction(
      clazz: LinkedClass,
      method: MethodDef
  )(implicit ctx: WasmContext): Unit = {
    implicit val pos = method.pos

    val namespace = method.flags.namespace
    val className = clazz.className
    val methodName = method.methodName

    val functionName = genFunctionName.forMethod(namespace, className, methodName)

    val isHijackedClass = clazz.kind == ClassKind.HijackedClass

    val receiverTyp =
      if (namespace.isStatic)
        None
      else if (isHijackedClass)
        Some(transformType(BoxedClassToPrimType(className)))
      else
        Some(transformClassType(className).toNonNullable)

    val body = method.body.getOrElse(throw new Exception("abstract method cannot be transformed"))

    val maybeIntrinsic: Option[SWasmTrees.SWasmTree] = className match {
      case SpecialNames.WasmMemorySegmentClass =>
        if (SpecialNames.loadMethodNames.contains(methodName)) {
          val size = methodName match {
            case SpecialNames.loadByteMethodName => SWasmTrees.LoadStore.I8
            case SpecialNames.loadIntMethodName  => SWasmTrees.LoadStore.I32
            case _                               => ???
          }
          Some(
            SWasmTrees.Load(
              size,
              VarRef(method.args.head.name)(method.args.head.ptpe),
              IntType
            )
          )
        } else if (SpecialNames.storeMethodNames.contains(methodName)) {
          val size = methodName match {
            case SpecialNames.storeByteMethodName => SWasmTrees.LoadStore.I8
            case SpecialNames.storeIntMethodName  => SWasmTrees.LoadStore.I32
            case _                                => ???
          }
          Some(
            SWasmTrees.Store(
              size,
              VarRef(method.args(0).name)(method.args(0).ptpe),
              VarRef(method.args(1).name)(method.args(1).ptpe)
            )
          )
        } else None

      case SpecialNames.WasmMemoryAllocatorClass =>
        if (methodName == SpecialNames.allocateMethodName)
          Some(SWasmTrees.Alloc(VarRef(method.args.head.name)(method.args.head.ptpe)))
        else if (methodName == SpecialNames.freeMethodName)
          Some(SWasmTrees.Free())
        else None
      case SpecialNames.WASI if methodName == SpecialNames.wasiFdWrite =>
        Some(
          SWasmTrees.WasmFunctionCall(
            genFunctionName.wasi.fdWrite,
            method.args.map(a => VarRef(a.name)(a.ptpe)),
            method.resultType
          )
        )
      case _ => None
    }
    // maybeIntrinsic.foreach(println)

    maybeIntrinsic match {
      case None =>
        // Emit the function
        FunctionEmitter.emitFunction(
          functionName,
          Some(className),
          captureParamDefs = None,
          receiverTyp,
          method.args,
          restParam = None,
          body,
          method.resultType
        )
      case Some(value) =>
        FunctionEmitter.emitIntrinsicFunction(
          functionName,
          Some(className),
          receiverTyp,
          method.args,
          restParam = None,
          value,
          method.resultType
        )
    }

    if (namespace == MemberNamespace.Public && !isHijackedClass) {
      /* Also generate the bridge that is stored in the table entries. In table
       * entries, the receiver type is always `(ref any)`.
       *
       * TODO: generate this only when the method is actually referred to from
       * at least one table.
       */

      val fb = new FunctionBuilder(
        ctx.moduleBuilder,
        genFunctionName.forTableEntry(className, methodName),
        pos
      )
      val receiverParam = fb.addParam("<this>", watpe.RefType.any)
      val argParams = method.args.map { arg =>
        fb.addParam(arg.name.name.nameString, TypeTransformer.transformType(arg.ptpe))
      }
      fb.setResultTypes(TypeTransformer.transformResultType(method.resultType))
      fb.setFunctionType(ctx.tableFunctionType(methodName))

      val instrs = fb

      // Load and cast down the receiver
      instrs += wa.LocalGet(receiverParam)
      receiverTyp match {
        case Some(watpe.RefType(_, watpe.HeapType.Any)) =>
          () // no cast necessary
        case Some(receiverTyp: watpe.RefType) =>
          instrs += wa.RefCast(receiverTyp)
        case _ =>
          throw new AssertionError(s"Unexpected receiver type $receiverTyp")
      }

      // Load the other parameters
      for (argParam <- argParams)
        instrs += wa.LocalGet(argParam)

      // Call the statically resolved method
      instrs += wa.ReturnCall(functionName)

      fb.buildAndAddToModule()
    }
  }
}
